{"cells":[{"cell_type":"markdown","metadata":{},"source":["# Условия"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"NGI3dREkJpUr","outputId":"557b2e96-90cd-4502-d42c-2ab91fd8b683"},"outputs":[{"name":"stderr","output_type":"stream","text":["c:\\Users\\shere\\anaconda3\\lib\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n","  warnings.warn(msg, FutureWarning)\n"]},{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["from numpy import random\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","random_array = random.normal(size=1000)\n","sns.distplot(random_array, hist=False)\n","\n","plt.show() "]},{"cell_type":"code","execution_count":25,"metadata":{"id":"dpJBI7gNJpU4"},"outputs":[],"source":["series = pd.Series(random_array)"]},{"cell_type":"markdown","metadata":{"id":"rAkZDYLMJpU5"},"source":["Перед вами нормально-распределенный массив сконвертированный в Pandas Series. Необходимо расчитать следующие статистики для массива (series), используя только собственно-написанные формулы:\n","* среднее значение \n","* медиану \n","* стандартное отклонение\n","* межквартильный размах\n","* 23-й перцентиль\n"]},{"cell_type":"code","execution_count":129,"metadata":{"id":"n0kAJgsvJpU9","outputId":"1ca37ec0-f0c6-41f3-d6c9-8bf39413dcbe"},"outputs":[{"data":{"text/plain":["0     -0.594741\n","1      0.245617\n","2      0.677237\n","3      0.446543\n","4     -0.804050\n","         ...   \n","995    1.020035\n","996    0.632343\n","997   -0.306430\n","998   -0.179219\n","999   -1.863558\n","Length: 1000, dtype: float64"]},"execution_count":129,"metadata":{},"output_type":"execute_result"}],"source":["series"]},{"cell_type":"markdown","metadata":{},"source":["# *Домашнее задание:*"]},{"cell_type":"markdown","metadata":{},"source":["**Задача 1** \n","Среднее значение"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"mfPJQg1rJpU-"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.005209646116282044\n"]}],"source":["# используя только собственно-написанные формулы\n","lst = series\n","count = len(lst)\n","def my_mean(x):\n","    sum_lst = 0\n","    for i in lst:\n","        sum_lst +=i\n","    res = (sum_lst)/count\n","    return res \n","b = my_mean(lst)\n","print(a)  "]},{"cell_type":"code","execution_count":35,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["0.005209646116282044\n"]}],"source":["# Используя библиотеки\n","import numpy as np\n","a = np.mean(series)\n","print (b)"]},{"cell_type":"code","execution_count":38,"metadata":{},"outputs":[{"data":{"text/plain":["True"]},"execution_count":38,"metadata":{},"output_type":"execute_result"}],"source":["# Check\n","a == b"]},{"cell_type":"markdown","metadata":{},"source":["**Задача 2** \n","Медиана"]},{"cell_type":"code","execution_count":209,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["-0.013467312023869162\n"]}],"source":["# используя только собственно-написанные формулы\n","lst = sorted(series)\n","count = len(lst)\n","place = int(count/2)\n","def my_median(x):\n","    if count // 2 == 0:\n","        return (lst[place])\n","    else: \n","        return ((lst[place]+lst[place-1])/2)\n","c = my_median(lst)\n","print(c) "]},{"cell_type":"code","execution_count":208,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["-0.013467312023869162\n"]}],"source":["# Используя библиотеки\n","d = np.median(series)\n","print (d)"]},{"cell_type":"code","execution_count":210,"metadata":{},"outputs":[{"data":{"text/plain":["True"]},"execution_count":210,"metadata":{},"output_type":"execute_result"}],"source":["# Check\n","c == d"]},{"cell_type":"markdown","metadata":{},"source":["**Задача 3** \n","стандартное отклонение"]},{"cell_type":"markdown","metadata":{},"source":["**Задача 4** \n","Межквартильный размах"]},{"cell_type":"markdown","metadata":{},"source":["**Задача 5** \n","23-й перцентиль"]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3.9.12 ('base')","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.12"},"orig_nbformat":4,"vscode":{"interpreter":{"hash":"20e841f5954d63b8b3b6cb54a60753963c5fec6300608400d8bc2bd13eb4cb9c"}}},"nbformat":4,"nbformat_minor":0}
